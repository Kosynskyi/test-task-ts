{"version":3,"file":"static/js/115.5c6db0f0.chunk.js","mappings":"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","sources":["pages/LoginPage/LoginPage.styled.ts","pages/LoginPage/LoginPage.tsx"],"sourcesContent":["import { Link } from 'react-router-dom';\r\nimport styled from '@emotion/styled';\r\n\r\nexport const StyledLink = styled(Link)`\r\n  text-decoration: none;\r\n  color: #57b846;\r\n`;\r\n","import { FC, useState } from 'react';\r\nimport { useForm, SubmitHandler } from 'react-hook-form';\r\nimport { useTranslation } from 'react-i18next';\r\nimport '../../i18n';\r\nimport { useAppDispatch } from 'hooks/hooks';\r\nimport { logIn } from 'redux/auth/authOperations';\r\nimport { useAuth } from 'redux/auth/authSelectors';\r\n\r\nimport {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  TextField,\r\n  InputAdornment,\r\n  Typography,\r\n  IconButton,\r\n} from '@mui/material';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\nimport LockIcon from '@mui/icons-material/Lock';\r\nimport Visibility from '@mui/icons-material/Visibility';\r\nimport VisibilityOff from '@mui/icons-material/VisibilityOff';\r\nimport { StyledLink } from './LoginPage.styled';\r\n\r\nconst LoginPage: FC = () => {\r\n  interface IInputs {\r\n    email: string;\r\n    password: string;\r\n  }\r\n\r\n  const { isLoading } = useAuth();\r\n  const dispatch = useAppDispatch();\r\n  const { t } = useTranslation();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const handleClickShowPassword = () => setShowPassword(show => !show);\r\n\r\n  const handleMouseDownPassword = (\r\n    event: React.MouseEvent<HTMLButtonElement>\r\n  ) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm<IInputs>({ mode: 'onBlur' });\r\n\r\n  const onSubmit: SubmitHandler<IInputs> = data => {\r\n    if (data.email === 'admin' && data.password === '12345') {\r\n      data.email = 'admin8@gmail.com';\r\n      data.password = '123458@gmail.com';\r\n    }\r\n    \r\n    dispatch(logIn(data))\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: '80vh',\r\n      }}\r\n    >\r\n      <Card\r\n        sx={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          justifyContent: 'center',\r\n          width: '300px',\r\n        }}\r\n      >\r\n        <CardContent>\r\n          <Typography variant=\"subtitle2\" align=\"center\" fontSize=\"18px\">\r\n            {t('loginPage.title')}\r\n          </Typography>\r\n          <Box\r\n            component=\"form\"\r\n            onSubmit={handleSubmit(onSubmit)}\r\n            autoComplete=\"off\"\r\n          >\r\n            {/* input for login */}\r\n            <TextField\r\n              id=\"login\"\r\n              type=\"text\"\r\n              size=\"small\"\r\n              label={t('loginPage.helperTextLogin')}\r\n              sx={{ width: '100%' }}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <PersonIcon />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              variant=\"standard\"\r\n              margin=\"dense\"\r\n              {...register('email', {\r\n                required: 'required',\r\n                maxLength: { value: 25, message: 'maximum 25 symbols' },\r\n              })}\r\n            />\r\n            {errors.email && (\r\n              <Typography sx={{ color: 'red' }} variant=\"caption\" role=\"alert\">\r\n                {errors?.email && errors?.email?.message}\r\n              </Typography>\r\n            )}\r\n\r\n            {/* input for password */}\r\n            <TextField\r\n              id=\"password\"\r\n              autoComplete=\"false\"\r\n              type={showPassword ? 'text' : 'password'}\r\n              size=\"small\"\r\n              label={t('loginPage.helperTextPassword')}\r\n              sx={{ width: '100%' }}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <LockIcon />\r\n                  </InputAdornment>\r\n                ),\r\n                endAdornment: (\r\n                  <InputAdornment position=\"end\">\r\n                    <IconButton\r\n                      aria-label=\"toggle password visibility\"\r\n                      onClick={handleClickShowPassword}\r\n                      onMouseDown={handleMouseDownPassword}\r\n                    >\r\n                      {showPassword ? (\r\n                        <VisibilityOff fontSize=\"small\" />\r\n                      ) : (\r\n                        <Visibility fontSize=\"small\" />\r\n                      )}\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              variant=\"standard\"\r\n              margin=\"normal\"\r\n              {...register('password', {\r\n                required: 'required',\r\n                minLength: { value: 4, message: 'minimum 4 symbols' },\r\n              })}\r\n            />\r\n            {errors.password && (\r\n              <Typography sx={{ color: 'red' }} variant=\"caption\" role=\"alert\">\r\n                {errors?.password && errors?.password?.message}\r\n              </Typography>\r\n            )}\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              disabled={isLoading}\r\n              sx={{\r\n                backgroundColor: '#57b846d7',\r\n                '&:hover': {\r\n                  backgroundColor: '#57b846',\r\n                },\r\n                border: 'none',\r\n                borderRadius: '25px',\r\n                width: '100%',\r\n              }}\r\n            >\r\n              {t('loginPage.formButton')}\r\n            </Button>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n      <Typography sx={{ mt: 3 }}>\r\n        {t('loginPage.additionalText')}{' '}\r\n        <StyledLink to=\"/registration\">\r\n          {t('loginPage.additionalTextLink')}\r\n        </StyledLink>\r\n      </Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"names":["StyledLink","styled","Link","isLoading","useAuth","dispatch","useAppDispatch","t","useTranslation","useState","showPassword","setShowPassword","useForm","mode","register","handleSubmit","reset","errors","formState","Box","sx","display","flexDirection","alignItems","justifyContent","height","Card","width","CardContent","Typography","variant","align","fontSize","component","onSubmit","data","email","password","logIn","autoComplete","TextField","id","type","size","label","InputProps","startAdornment","InputAdornment","position","Person","margin","required","maxLength","value","message","color","role","Lock","endAdornment","IconButton","onClick","show","onMouseDown","event","preventDefault","VisibilityOff","Visibility","minLength","Button","disabled","backgroundColor","border","borderRadius","mt","to"],"sourceRoot":""}